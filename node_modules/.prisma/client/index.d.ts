
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model GoldAsset
 * 
 */
export type GoldAsset = $Result.DefaultSelection<Prisma.$GoldAssetPayload>
/**
 * Model GoldValue
 * 
 */
export type GoldValue = $Result.DefaultSelection<Prisma.$GoldValuePayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.goldAsset`: Exposes CRUD operations for the **GoldAsset** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GoldAssets
    * const goldAssets = await prisma.goldAsset.findMany()
    * ```
    */
  get goldAsset(): Prisma.GoldAssetDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.goldValue`: Exposes CRUD operations for the **GoldValue** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GoldValues
    * const goldValues = await prisma.goldValue.findMany()
    * ```
    */
  get goldValue(): Prisma.GoldValueDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.9.0
   * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    GoldAsset: 'GoldAsset',
    GoldValue: 'GoldValue'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "goldAsset" | "goldValue"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      GoldAsset: {
        payload: Prisma.$GoldAssetPayload<ExtArgs>
        fields: Prisma.GoldAssetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GoldAssetFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoldAssetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GoldAssetFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoldAssetPayload>
          }
          findFirst: {
            args: Prisma.GoldAssetFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoldAssetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GoldAssetFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoldAssetPayload>
          }
          findMany: {
            args: Prisma.GoldAssetFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoldAssetPayload>[]
          }
          create: {
            args: Prisma.GoldAssetCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoldAssetPayload>
          }
          createMany: {
            args: Prisma.GoldAssetCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GoldAssetCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoldAssetPayload>[]
          }
          delete: {
            args: Prisma.GoldAssetDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoldAssetPayload>
          }
          update: {
            args: Prisma.GoldAssetUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoldAssetPayload>
          }
          deleteMany: {
            args: Prisma.GoldAssetDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GoldAssetUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GoldAssetUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoldAssetPayload>[]
          }
          upsert: {
            args: Prisma.GoldAssetUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoldAssetPayload>
          }
          aggregate: {
            args: Prisma.GoldAssetAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGoldAsset>
          }
          groupBy: {
            args: Prisma.GoldAssetGroupByArgs<ExtArgs>
            result: $Utils.Optional<GoldAssetGroupByOutputType>[]
          }
          count: {
            args: Prisma.GoldAssetCountArgs<ExtArgs>
            result: $Utils.Optional<GoldAssetCountAggregateOutputType> | number
          }
        }
      }
      GoldValue: {
        payload: Prisma.$GoldValuePayload<ExtArgs>
        fields: Prisma.GoldValueFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GoldValueFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoldValuePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GoldValueFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoldValuePayload>
          }
          findFirst: {
            args: Prisma.GoldValueFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoldValuePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GoldValueFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoldValuePayload>
          }
          findMany: {
            args: Prisma.GoldValueFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoldValuePayload>[]
          }
          create: {
            args: Prisma.GoldValueCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoldValuePayload>
          }
          createMany: {
            args: Prisma.GoldValueCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GoldValueCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoldValuePayload>[]
          }
          delete: {
            args: Prisma.GoldValueDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoldValuePayload>
          }
          update: {
            args: Prisma.GoldValueUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoldValuePayload>
          }
          deleteMany: {
            args: Prisma.GoldValueDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GoldValueUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GoldValueUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoldValuePayload>[]
          }
          upsert: {
            args: Prisma.GoldValueUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoldValuePayload>
          }
          aggregate: {
            args: Prisma.GoldValueAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGoldValue>
          }
          groupBy: {
            args: Prisma.GoldValueGroupByArgs<ExtArgs>
            result: $Utils.Optional<GoldValueGroupByOutputType>[]
          }
          count: {
            args: Prisma.GoldValueCountArgs<ExtArgs>
            result: $Utils.Optional<GoldValueCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    goldAsset?: GoldAssetOmit
    goldValue?: GoldValueOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    goldAssets: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    goldAssets?: boolean | UserCountOutputTypeCountGoldAssetsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountGoldAssetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GoldAssetWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    userid: string | null
    password: string | null
    email: string | null
    region: string | null
    is_verified: boolean | null
    otp: string | null
    otp_expires: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    userid: string | null
    password: string | null
    email: string | null
    region: string | null
    is_verified: boolean | null
    otp: string | null
    otp_expires: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    userid: number
    password: number
    email: number
    region: number
    is_verified: number
    otp: number
    otp_expires: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    userid?: true
    password?: true
    email?: true
    region?: true
    is_verified?: true
    otp?: true
    otp_expires?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    userid?: true
    password?: true
    email?: true
    region?: true
    is_verified?: true
    otp?: true
    otp_expires?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    userid?: true
    password?: true
    email?: true
    region?: true
    is_verified?: true
    otp?: true
    otp_expires?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    userid: string
    password: string
    email: string
    region: string
    is_verified: boolean
    otp: string | null
    otp_expires: Date | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userid?: boolean
    password?: boolean
    email?: boolean
    region?: boolean
    is_verified?: boolean
    otp?: boolean
    otp_expires?: boolean
    goldAssets?: boolean | User$goldAssetsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userid?: boolean
    password?: boolean
    email?: boolean
    region?: boolean
    is_verified?: boolean
    otp?: boolean
    otp_expires?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userid?: boolean
    password?: boolean
    email?: boolean
    region?: boolean
    is_verified?: boolean
    otp?: boolean
    otp_expires?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    userid?: boolean
    password?: boolean
    email?: boolean
    region?: boolean
    is_verified?: boolean
    otp?: boolean
    otp_expires?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userid" | "password" | "email" | "region" | "is_verified" | "otp" | "otp_expires", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    goldAssets?: boolean | User$goldAssetsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      goldAssets: Prisma.$GoldAssetPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userid: string
      password: string
      email: string
      region: string
      is_verified: boolean
      otp: string | null
      otp_expires: Date | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    goldAssets<T extends User$goldAssetsArgs<ExtArgs> = {}>(args?: Subset<T, User$goldAssetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoldAssetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly userid: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly region: FieldRef<"User", 'String'>
    readonly is_verified: FieldRef<"User", 'Boolean'>
    readonly otp: FieldRef<"User", 'String'>
    readonly otp_expires: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.goldAssets
   */
  export type User$goldAssetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoldAsset
     */
    select?: GoldAssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoldAsset
     */
    omit?: GoldAssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoldAssetInclude<ExtArgs> | null
    where?: GoldAssetWhereInput
    orderBy?: GoldAssetOrderByWithRelationInput | GoldAssetOrderByWithRelationInput[]
    cursor?: GoldAssetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GoldAssetScalarFieldEnum | GoldAssetScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model GoldAsset
   */

  export type AggregateGoldAsset = {
    _count: GoldAssetCountAggregateOutputType | null
    _avg: GoldAssetAvgAggregateOutputType | null
    _sum: GoldAssetSumAggregateOutputType | null
    _min: GoldAssetMinAggregateOutputType | null
    _max: GoldAssetMaxAggregateOutputType | null
  }

  export type GoldAssetAvgAggregateOutputType = {
    id: number | null
    weight: number | null
    purchase_price: number | null
    userId: number | null
  }

  export type GoldAssetSumAggregateOutputType = {
    id: number | null
    weight: number | null
    purchase_price: number | null
    userId: number | null
  }

  export type GoldAssetMinAggregateOutputType = {
    id: number | null
    type: string | null
    weight: number | null
    purchase_price: number | null
    purchase_date: Date | null
    userId: number | null
  }

  export type GoldAssetMaxAggregateOutputType = {
    id: number | null
    type: string | null
    weight: number | null
    purchase_price: number | null
    purchase_date: Date | null
    userId: number | null
  }

  export type GoldAssetCountAggregateOutputType = {
    id: number
    type: number
    weight: number
    purchase_price: number
    purchase_date: number
    userId: number
    _all: number
  }


  export type GoldAssetAvgAggregateInputType = {
    id?: true
    weight?: true
    purchase_price?: true
    userId?: true
  }

  export type GoldAssetSumAggregateInputType = {
    id?: true
    weight?: true
    purchase_price?: true
    userId?: true
  }

  export type GoldAssetMinAggregateInputType = {
    id?: true
    type?: true
    weight?: true
    purchase_price?: true
    purchase_date?: true
    userId?: true
  }

  export type GoldAssetMaxAggregateInputType = {
    id?: true
    type?: true
    weight?: true
    purchase_price?: true
    purchase_date?: true
    userId?: true
  }

  export type GoldAssetCountAggregateInputType = {
    id?: true
    type?: true
    weight?: true
    purchase_price?: true
    purchase_date?: true
    userId?: true
    _all?: true
  }

  export type GoldAssetAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GoldAsset to aggregate.
     */
    where?: GoldAssetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GoldAssets to fetch.
     */
    orderBy?: GoldAssetOrderByWithRelationInput | GoldAssetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GoldAssetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GoldAssets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GoldAssets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GoldAssets
    **/
    _count?: true | GoldAssetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GoldAssetAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GoldAssetSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GoldAssetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GoldAssetMaxAggregateInputType
  }

  export type GetGoldAssetAggregateType<T extends GoldAssetAggregateArgs> = {
        [P in keyof T & keyof AggregateGoldAsset]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGoldAsset[P]>
      : GetScalarType<T[P], AggregateGoldAsset[P]>
  }




  export type GoldAssetGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GoldAssetWhereInput
    orderBy?: GoldAssetOrderByWithAggregationInput | GoldAssetOrderByWithAggregationInput[]
    by: GoldAssetScalarFieldEnum[] | GoldAssetScalarFieldEnum
    having?: GoldAssetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GoldAssetCountAggregateInputType | true
    _avg?: GoldAssetAvgAggregateInputType
    _sum?: GoldAssetSumAggregateInputType
    _min?: GoldAssetMinAggregateInputType
    _max?: GoldAssetMaxAggregateInputType
  }

  export type GoldAssetGroupByOutputType = {
    id: number
    type: string
    weight: number
    purchase_price: number
    purchase_date: Date
    userId: number
    _count: GoldAssetCountAggregateOutputType | null
    _avg: GoldAssetAvgAggregateOutputType | null
    _sum: GoldAssetSumAggregateOutputType | null
    _min: GoldAssetMinAggregateOutputType | null
    _max: GoldAssetMaxAggregateOutputType | null
  }

  type GetGoldAssetGroupByPayload<T extends GoldAssetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GoldAssetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GoldAssetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GoldAssetGroupByOutputType[P]>
            : GetScalarType<T[P], GoldAssetGroupByOutputType[P]>
        }
      >
    >


  export type GoldAssetSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    weight?: boolean
    purchase_price?: boolean
    purchase_date?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["goldAsset"]>

  export type GoldAssetSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    weight?: boolean
    purchase_price?: boolean
    purchase_date?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["goldAsset"]>

  export type GoldAssetSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    weight?: boolean
    purchase_price?: boolean
    purchase_date?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["goldAsset"]>

  export type GoldAssetSelectScalar = {
    id?: boolean
    type?: boolean
    weight?: boolean
    purchase_price?: boolean
    purchase_date?: boolean
    userId?: boolean
  }

  export type GoldAssetOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "type" | "weight" | "purchase_price" | "purchase_date" | "userId", ExtArgs["result"]["goldAsset"]>
  export type GoldAssetInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type GoldAssetIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type GoldAssetIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $GoldAssetPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GoldAsset"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      type: string
      weight: number
      purchase_price: number
      purchase_date: Date
      userId: number
    }, ExtArgs["result"]["goldAsset"]>
    composites: {}
  }

  type GoldAssetGetPayload<S extends boolean | null | undefined | GoldAssetDefaultArgs> = $Result.GetResult<Prisma.$GoldAssetPayload, S>

  type GoldAssetCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GoldAssetFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GoldAssetCountAggregateInputType | true
    }

  export interface GoldAssetDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GoldAsset'], meta: { name: 'GoldAsset' } }
    /**
     * Find zero or one GoldAsset that matches the filter.
     * @param {GoldAssetFindUniqueArgs} args - Arguments to find a GoldAsset
     * @example
     * // Get one GoldAsset
     * const goldAsset = await prisma.goldAsset.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GoldAssetFindUniqueArgs>(args: SelectSubset<T, GoldAssetFindUniqueArgs<ExtArgs>>): Prisma__GoldAssetClient<$Result.GetResult<Prisma.$GoldAssetPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GoldAsset that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GoldAssetFindUniqueOrThrowArgs} args - Arguments to find a GoldAsset
     * @example
     * // Get one GoldAsset
     * const goldAsset = await prisma.goldAsset.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GoldAssetFindUniqueOrThrowArgs>(args: SelectSubset<T, GoldAssetFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GoldAssetClient<$Result.GetResult<Prisma.$GoldAssetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GoldAsset that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoldAssetFindFirstArgs} args - Arguments to find a GoldAsset
     * @example
     * // Get one GoldAsset
     * const goldAsset = await prisma.goldAsset.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GoldAssetFindFirstArgs>(args?: SelectSubset<T, GoldAssetFindFirstArgs<ExtArgs>>): Prisma__GoldAssetClient<$Result.GetResult<Prisma.$GoldAssetPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GoldAsset that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoldAssetFindFirstOrThrowArgs} args - Arguments to find a GoldAsset
     * @example
     * // Get one GoldAsset
     * const goldAsset = await prisma.goldAsset.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GoldAssetFindFirstOrThrowArgs>(args?: SelectSubset<T, GoldAssetFindFirstOrThrowArgs<ExtArgs>>): Prisma__GoldAssetClient<$Result.GetResult<Prisma.$GoldAssetPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GoldAssets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoldAssetFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GoldAssets
     * const goldAssets = await prisma.goldAsset.findMany()
     * 
     * // Get first 10 GoldAssets
     * const goldAssets = await prisma.goldAsset.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const goldAssetWithIdOnly = await prisma.goldAsset.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GoldAssetFindManyArgs>(args?: SelectSubset<T, GoldAssetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoldAssetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GoldAsset.
     * @param {GoldAssetCreateArgs} args - Arguments to create a GoldAsset.
     * @example
     * // Create one GoldAsset
     * const GoldAsset = await prisma.goldAsset.create({
     *   data: {
     *     // ... data to create a GoldAsset
     *   }
     * })
     * 
     */
    create<T extends GoldAssetCreateArgs>(args: SelectSubset<T, GoldAssetCreateArgs<ExtArgs>>): Prisma__GoldAssetClient<$Result.GetResult<Prisma.$GoldAssetPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GoldAssets.
     * @param {GoldAssetCreateManyArgs} args - Arguments to create many GoldAssets.
     * @example
     * // Create many GoldAssets
     * const goldAsset = await prisma.goldAsset.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GoldAssetCreateManyArgs>(args?: SelectSubset<T, GoldAssetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GoldAssets and returns the data saved in the database.
     * @param {GoldAssetCreateManyAndReturnArgs} args - Arguments to create many GoldAssets.
     * @example
     * // Create many GoldAssets
     * const goldAsset = await prisma.goldAsset.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GoldAssets and only return the `id`
     * const goldAssetWithIdOnly = await prisma.goldAsset.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GoldAssetCreateManyAndReturnArgs>(args?: SelectSubset<T, GoldAssetCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoldAssetPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a GoldAsset.
     * @param {GoldAssetDeleteArgs} args - Arguments to delete one GoldAsset.
     * @example
     * // Delete one GoldAsset
     * const GoldAsset = await prisma.goldAsset.delete({
     *   where: {
     *     // ... filter to delete one GoldAsset
     *   }
     * })
     * 
     */
    delete<T extends GoldAssetDeleteArgs>(args: SelectSubset<T, GoldAssetDeleteArgs<ExtArgs>>): Prisma__GoldAssetClient<$Result.GetResult<Prisma.$GoldAssetPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GoldAsset.
     * @param {GoldAssetUpdateArgs} args - Arguments to update one GoldAsset.
     * @example
     * // Update one GoldAsset
     * const goldAsset = await prisma.goldAsset.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GoldAssetUpdateArgs>(args: SelectSubset<T, GoldAssetUpdateArgs<ExtArgs>>): Prisma__GoldAssetClient<$Result.GetResult<Prisma.$GoldAssetPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GoldAssets.
     * @param {GoldAssetDeleteManyArgs} args - Arguments to filter GoldAssets to delete.
     * @example
     * // Delete a few GoldAssets
     * const { count } = await prisma.goldAsset.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GoldAssetDeleteManyArgs>(args?: SelectSubset<T, GoldAssetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GoldAssets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoldAssetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GoldAssets
     * const goldAsset = await prisma.goldAsset.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GoldAssetUpdateManyArgs>(args: SelectSubset<T, GoldAssetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GoldAssets and returns the data updated in the database.
     * @param {GoldAssetUpdateManyAndReturnArgs} args - Arguments to update many GoldAssets.
     * @example
     * // Update many GoldAssets
     * const goldAsset = await prisma.goldAsset.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more GoldAssets and only return the `id`
     * const goldAssetWithIdOnly = await prisma.goldAsset.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GoldAssetUpdateManyAndReturnArgs>(args: SelectSubset<T, GoldAssetUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoldAssetPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one GoldAsset.
     * @param {GoldAssetUpsertArgs} args - Arguments to update or create a GoldAsset.
     * @example
     * // Update or create a GoldAsset
     * const goldAsset = await prisma.goldAsset.upsert({
     *   create: {
     *     // ... data to create a GoldAsset
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GoldAsset we want to update
     *   }
     * })
     */
    upsert<T extends GoldAssetUpsertArgs>(args: SelectSubset<T, GoldAssetUpsertArgs<ExtArgs>>): Prisma__GoldAssetClient<$Result.GetResult<Prisma.$GoldAssetPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GoldAssets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoldAssetCountArgs} args - Arguments to filter GoldAssets to count.
     * @example
     * // Count the number of GoldAssets
     * const count = await prisma.goldAsset.count({
     *   where: {
     *     // ... the filter for the GoldAssets we want to count
     *   }
     * })
    **/
    count<T extends GoldAssetCountArgs>(
      args?: Subset<T, GoldAssetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GoldAssetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GoldAsset.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoldAssetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GoldAssetAggregateArgs>(args: Subset<T, GoldAssetAggregateArgs>): Prisma.PrismaPromise<GetGoldAssetAggregateType<T>>

    /**
     * Group by GoldAsset.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoldAssetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GoldAssetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GoldAssetGroupByArgs['orderBy'] }
        : { orderBy?: GoldAssetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GoldAssetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGoldAssetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GoldAsset model
   */
  readonly fields: GoldAssetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GoldAsset.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GoldAssetClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GoldAsset model
   */
  interface GoldAssetFieldRefs {
    readonly id: FieldRef<"GoldAsset", 'Int'>
    readonly type: FieldRef<"GoldAsset", 'String'>
    readonly weight: FieldRef<"GoldAsset", 'Float'>
    readonly purchase_price: FieldRef<"GoldAsset", 'Float'>
    readonly purchase_date: FieldRef<"GoldAsset", 'DateTime'>
    readonly userId: FieldRef<"GoldAsset", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * GoldAsset findUnique
   */
  export type GoldAssetFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoldAsset
     */
    select?: GoldAssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoldAsset
     */
    omit?: GoldAssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoldAssetInclude<ExtArgs> | null
    /**
     * Filter, which GoldAsset to fetch.
     */
    where: GoldAssetWhereUniqueInput
  }

  /**
   * GoldAsset findUniqueOrThrow
   */
  export type GoldAssetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoldAsset
     */
    select?: GoldAssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoldAsset
     */
    omit?: GoldAssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoldAssetInclude<ExtArgs> | null
    /**
     * Filter, which GoldAsset to fetch.
     */
    where: GoldAssetWhereUniqueInput
  }

  /**
   * GoldAsset findFirst
   */
  export type GoldAssetFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoldAsset
     */
    select?: GoldAssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoldAsset
     */
    omit?: GoldAssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoldAssetInclude<ExtArgs> | null
    /**
     * Filter, which GoldAsset to fetch.
     */
    where?: GoldAssetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GoldAssets to fetch.
     */
    orderBy?: GoldAssetOrderByWithRelationInput | GoldAssetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GoldAssets.
     */
    cursor?: GoldAssetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GoldAssets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GoldAssets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GoldAssets.
     */
    distinct?: GoldAssetScalarFieldEnum | GoldAssetScalarFieldEnum[]
  }

  /**
   * GoldAsset findFirstOrThrow
   */
  export type GoldAssetFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoldAsset
     */
    select?: GoldAssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoldAsset
     */
    omit?: GoldAssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoldAssetInclude<ExtArgs> | null
    /**
     * Filter, which GoldAsset to fetch.
     */
    where?: GoldAssetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GoldAssets to fetch.
     */
    orderBy?: GoldAssetOrderByWithRelationInput | GoldAssetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GoldAssets.
     */
    cursor?: GoldAssetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GoldAssets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GoldAssets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GoldAssets.
     */
    distinct?: GoldAssetScalarFieldEnum | GoldAssetScalarFieldEnum[]
  }

  /**
   * GoldAsset findMany
   */
  export type GoldAssetFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoldAsset
     */
    select?: GoldAssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoldAsset
     */
    omit?: GoldAssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoldAssetInclude<ExtArgs> | null
    /**
     * Filter, which GoldAssets to fetch.
     */
    where?: GoldAssetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GoldAssets to fetch.
     */
    orderBy?: GoldAssetOrderByWithRelationInput | GoldAssetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GoldAssets.
     */
    cursor?: GoldAssetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GoldAssets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GoldAssets.
     */
    skip?: number
    distinct?: GoldAssetScalarFieldEnum | GoldAssetScalarFieldEnum[]
  }

  /**
   * GoldAsset create
   */
  export type GoldAssetCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoldAsset
     */
    select?: GoldAssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoldAsset
     */
    omit?: GoldAssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoldAssetInclude<ExtArgs> | null
    /**
     * The data needed to create a GoldAsset.
     */
    data: XOR<GoldAssetCreateInput, GoldAssetUncheckedCreateInput>
  }

  /**
   * GoldAsset createMany
   */
  export type GoldAssetCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GoldAssets.
     */
    data: GoldAssetCreateManyInput | GoldAssetCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GoldAsset createManyAndReturn
   */
  export type GoldAssetCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoldAsset
     */
    select?: GoldAssetSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GoldAsset
     */
    omit?: GoldAssetOmit<ExtArgs> | null
    /**
     * The data used to create many GoldAssets.
     */
    data: GoldAssetCreateManyInput | GoldAssetCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoldAssetIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * GoldAsset update
   */
  export type GoldAssetUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoldAsset
     */
    select?: GoldAssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoldAsset
     */
    omit?: GoldAssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoldAssetInclude<ExtArgs> | null
    /**
     * The data needed to update a GoldAsset.
     */
    data: XOR<GoldAssetUpdateInput, GoldAssetUncheckedUpdateInput>
    /**
     * Choose, which GoldAsset to update.
     */
    where: GoldAssetWhereUniqueInput
  }

  /**
   * GoldAsset updateMany
   */
  export type GoldAssetUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GoldAssets.
     */
    data: XOR<GoldAssetUpdateManyMutationInput, GoldAssetUncheckedUpdateManyInput>
    /**
     * Filter which GoldAssets to update
     */
    where?: GoldAssetWhereInput
    /**
     * Limit how many GoldAssets to update.
     */
    limit?: number
  }

  /**
   * GoldAsset updateManyAndReturn
   */
  export type GoldAssetUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoldAsset
     */
    select?: GoldAssetSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GoldAsset
     */
    omit?: GoldAssetOmit<ExtArgs> | null
    /**
     * The data used to update GoldAssets.
     */
    data: XOR<GoldAssetUpdateManyMutationInput, GoldAssetUncheckedUpdateManyInput>
    /**
     * Filter which GoldAssets to update
     */
    where?: GoldAssetWhereInput
    /**
     * Limit how many GoldAssets to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoldAssetIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * GoldAsset upsert
   */
  export type GoldAssetUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoldAsset
     */
    select?: GoldAssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoldAsset
     */
    omit?: GoldAssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoldAssetInclude<ExtArgs> | null
    /**
     * The filter to search for the GoldAsset to update in case it exists.
     */
    where: GoldAssetWhereUniqueInput
    /**
     * In case the GoldAsset found by the `where` argument doesn't exist, create a new GoldAsset with this data.
     */
    create: XOR<GoldAssetCreateInput, GoldAssetUncheckedCreateInput>
    /**
     * In case the GoldAsset was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GoldAssetUpdateInput, GoldAssetUncheckedUpdateInput>
  }

  /**
   * GoldAsset delete
   */
  export type GoldAssetDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoldAsset
     */
    select?: GoldAssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoldAsset
     */
    omit?: GoldAssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoldAssetInclude<ExtArgs> | null
    /**
     * Filter which GoldAsset to delete.
     */
    where: GoldAssetWhereUniqueInput
  }

  /**
   * GoldAsset deleteMany
   */
  export type GoldAssetDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GoldAssets to delete
     */
    where?: GoldAssetWhereInput
    /**
     * Limit how many GoldAssets to delete.
     */
    limit?: number
  }

  /**
   * GoldAsset without action
   */
  export type GoldAssetDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoldAsset
     */
    select?: GoldAssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoldAsset
     */
    omit?: GoldAssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoldAssetInclude<ExtArgs> | null
  }


  /**
   * Model GoldValue
   */

  export type AggregateGoldValue = {
    _count: GoldValueCountAggregateOutputType | null
    _avg: GoldValueAvgAggregateOutputType | null
    _sum: GoldValueSumAggregateOutputType | null
    _min: GoldValueMinAggregateOutputType | null
    _max: GoldValueMaxAggregateOutputType | null
  }

  export type GoldValueAvgAggregateOutputType = {
    id: number | null
    price_per_gram: number | null
  }

  export type GoldValueSumAggregateOutputType = {
    id: number | null
    price_per_gram: number | null
  }

  export type GoldValueMinAggregateOutputType = {
    id: number | null
    date: Date | null
    price_per_gram: number | null
  }

  export type GoldValueMaxAggregateOutputType = {
    id: number | null
    date: Date | null
    price_per_gram: number | null
  }

  export type GoldValueCountAggregateOutputType = {
    id: number
    date: number
    price_per_gram: number
    _all: number
  }


  export type GoldValueAvgAggregateInputType = {
    id?: true
    price_per_gram?: true
  }

  export type GoldValueSumAggregateInputType = {
    id?: true
    price_per_gram?: true
  }

  export type GoldValueMinAggregateInputType = {
    id?: true
    date?: true
    price_per_gram?: true
  }

  export type GoldValueMaxAggregateInputType = {
    id?: true
    date?: true
    price_per_gram?: true
  }

  export type GoldValueCountAggregateInputType = {
    id?: true
    date?: true
    price_per_gram?: true
    _all?: true
  }

  export type GoldValueAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GoldValue to aggregate.
     */
    where?: GoldValueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GoldValues to fetch.
     */
    orderBy?: GoldValueOrderByWithRelationInput | GoldValueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GoldValueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GoldValues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GoldValues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GoldValues
    **/
    _count?: true | GoldValueCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GoldValueAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GoldValueSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GoldValueMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GoldValueMaxAggregateInputType
  }

  export type GetGoldValueAggregateType<T extends GoldValueAggregateArgs> = {
        [P in keyof T & keyof AggregateGoldValue]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGoldValue[P]>
      : GetScalarType<T[P], AggregateGoldValue[P]>
  }




  export type GoldValueGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GoldValueWhereInput
    orderBy?: GoldValueOrderByWithAggregationInput | GoldValueOrderByWithAggregationInput[]
    by: GoldValueScalarFieldEnum[] | GoldValueScalarFieldEnum
    having?: GoldValueScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GoldValueCountAggregateInputType | true
    _avg?: GoldValueAvgAggregateInputType
    _sum?: GoldValueSumAggregateInputType
    _min?: GoldValueMinAggregateInputType
    _max?: GoldValueMaxAggregateInputType
  }

  export type GoldValueGroupByOutputType = {
    id: number
    date: Date
    price_per_gram: number
    _count: GoldValueCountAggregateOutputType | null
    _avg: GoldValueAvgAggregateOutputType | null
    _sum: GoldValueSumAggregateOutputType | null
    _min: GoldValueMinAggregateOutputType | null
    _max: GoldValueMaxAggregateOutputType | null
  }

  type GetGoldValueGroupByPayload<T extends GoldValueGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GoldValueGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GoldValueGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GoldValueGroupByOutputType[P]>
            : GetScalarType<T[P], GoldValueGroupByOutputType[P]>
        }
      >
    >


  export type GoldValueSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    price_per_gram?: boolean
  }, ExtArgs["result"]["goldValue"]>

  export type GoldValueSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    price_per_gram?: boolean
  }, ExtArgs["result"]["goldValue"]>

  export type GoldValueSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    price_per_gram?: boolean
  }, ExtArgs["result"]["goldValue"]>

  export type GoldValueSelectScalar = {
    id?: boolean
    date?: boolean
    price_per_gram?: boolean
  }

  export type GoldValueOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "date" | "price_per_gram", ExtArgs["result"]["goldValue"]>

  export type $GoldValuePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GoldValue"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      date: Date
      price_per_gram: number
    }, ExtArgs["result"]["goldValue"]>
    composites: {}
  }

  type GoldValueGetPayload<S extends boolean | null | undefined | GoldValueDefaultArgs> = $Result.GetResult<Prisma.$GoldValuePayload, S>

  type GoldValueCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GoldValueFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GoldValueCountAggregateInputType | true
    }

  export interface GoldValueDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GoldValue'], meta: { name: 'GoldValue' } }
    /**
     * Find zero or one GoldValue that matches the filter.
     * @param {GoldValueFindUniqueArgs} args - Arguments to find a GoldValue
     * @example
     * // Get one GoldValue
     * const goldValue = await prisma.goldValue.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GoldValueFindUniqueArgs>(args: SelectSubset<T, GoldValueFindUniqueArgs<ExtArgs>>): Prisma__GoldValueClient<$Result.GetResult<Prisma.$GoldValuePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GoldValue that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GoldValueFindUniqueOrThrowArgs} args - Arguments to find a GoldValue
     * @example
     * // Get one GoldValue
     * const goldValue = await prisma.goldValue.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GoldValueFindUniqueOrThrowArgs>(args: SelectSubset<T, GoldValueFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GoldValueClient<$Result.GetResult<Prisma.$GoldValuePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GoldValue that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoldValueFindFirstArgs} args - Arguments to find a GoldValue
     * @example
     * // Get one GoldValue
     * const goldValue = await prisma.goldValue.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GoldValueFindFirstArgs>(args?: SelectSubset<T, GoldValueFindFirstArgs<ExtArgs>>): Prisma__GoldValueClient<$Result.GetResult<Prisma.$GoldValuePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GoldValue that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoldValueFindFirstOrThrowArgs} args - Arguments to find a GoldValue
     * @example
     * // Get one GoldValue
     * const goldValue = await prisma.goldValue.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GoldValueFindFirstOrThrowArgs>(args?: SelectSubset<T, GoldValueFindFirstOrThrowArgs<ExtArgs>>): Prisma__GoldValueClient<$Result.GetResult<Prisma.$GoldValuePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GoldValues that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoldValueFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GoldValues
     * const goldValues = await prisma.goldValue.findMany()
     * 
     * // Get first 10 GoldValues
     * const goldValues = await prisma.goldValue.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const goldValueWithIdOnly = await prisma.goldValue.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GoldValueFindManyArgs>(args?: SelectSubset<T, GoldValueFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoldValuePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GoldValue.
     * @param {GoldValueCreateArgs} args - Arguments to create a GoldValue.
     * @example
     * // Create one GoldValue
     * const GoldValue = await prisma.goldValue.create({
     *   data: {
     *     // ... data to create a GoldValue
     *   }
     * })
     * 
     */
    create<T extends GoldValueCreateArgs>(args: SelectSubset<T, GoldValueCreateArgs<ExtArgs>>): Prisma__GoldValueClient<$Result.GetResult<Prisma.$GoldValuePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GoldValues.
     * @param {GoldValueCreateManyArgs} args - Arguments to create many GoldValues.
     * @example
     * // Create many GoldValues
     * const goldValue = await prisma.goldValue.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GoldValueCreateManyArgs>(args?: SelectSubset<T, GoldValueCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GoldValues and returns the data saved in the database.
     * @param {GoldValueCreateManyAndReturnArgs} args - Arguments to create many GoldValues.
     * @example
     * // Create many GoldValues
     * const goldValue = await prisma.goldValue.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GoldValues and only return the `id`
     * const goldValueWithIdOnly = await prisma.goldValue.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GoldValueCreateManyAndReturnArgs>(args?: SelectSubset<T, GoldValueCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoldValuePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a GoldValue.
     * @param {GoldValueDeleteArgs} args - Arguments to delete one GoldValue.
     * @example
     * // Delete one GoldValue
     * const GoldValue = await prisma.goldValue.delete({
     *   where: {
     *     // ... filter to delete one GoldValue
     *   }
     * })
     * 
     */
    delete<T extends GoldValueDeleteArgs>(args: SelectSubset<T, GoldValueDeleteArgs<ExtArgs>>): Prisma__GoldValueClient<$Result.GetResult<Prisma.$GoldValuePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GoldValue.
     * @param {GoldValueUpdateArgs} args - Arguments to update one GoldValue.
     * @example
     * // Update one GoldValue
     * const goldValue = await prisma.goldValue.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GoldValueUpdateArgs>(args: SelectSubset<T, GoldValueUpdateArgs<ExtArgs>>): Prisma__GoldValueClient<$Result.GetResult<Prisma.$GoldValuePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GoldValues.
     * @param {GoldValueDeleteManyArgs} args - Arguments to filter GoldValues to delete.
     * @example
     * // Delete a few GoldValues
     * const { count } = await prisma.goldValue.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GoldValueDeleteManyArgs>(args?: SelectSubset<T, GoldValueDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GoldValues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoldValueUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GoldValues
     * const goldValue = await prisma.goldValue.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GoldValueUpdateManyArgs>(args: SelectSubset<T, GoldValueUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GoldValues and returns the data updated in the database.
     * @param {GoldValueUpdateManyAndReturnArgs} args - Arguments to update many GoldValues.
     * @example
     * // Update many GoldValues
     * const goldValue = await prisma.goldValue.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more GoldValues and only return the `id`
     * const goldValueWithIdOnly = await prisma.goldValue.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GoldValueUpdateManyAndReturnArgs>(args: SelectSubset<T, GoldValueUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoldValuePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one GoldValue.
     * @param {GoldValueUpsertArgs} args - Arguments to update or create a GoldValue.
     * @example
     * // Update or create a GoldValue
     * const goldValue = await prisma.goldValue.upsert({
     *   create: {
     *     // ... data to create a GoldValue
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GoldValue we want to update
     *   }
     * })
     */
    upsert<T extends GoldValueUpsertArgs>(args: SelectSubset<T, GoldValueUpsertArgs<ExtArgs>>): Prisma__GoldValueClient<$Result.GetResult<Prisma.$GoldValuePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GoldValues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoldValueCountArgs} args - Arguments to filter GoldValues to count.
     * @example
     * // Count the number of GoldValues
     * const count = await prisma.goldValue.count({
     *   where: {
     *     // ... the filter for the GoldValues we want to count
     *   }
     * })
    **/
    count<T extends GoldValueCountArgs>(
      args?: Subset<T, GoldValueCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GoldValueCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GoldValue.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoldValueAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GoldValueAggregateArgs>(args: Subset<T, GoldValueAggregateArgs>): Prisma.PrismaPromise<GetGoldValueAggregateType<T>>

    /**
     * Group by GoldValue.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoldValueGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GoldValueGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GoldValueGroupByArgs['orderBy'] }
        : { orderBy?: GoldValueGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GoldValueGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGoldValueGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GoldValue model
   */
  readonly fields: GoldValueFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GoldValue.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GoldValueClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GoldValue model
   */
  interface GoldValueFieldRefs {
    readonly id: FieldRef<"GoldValue", 'Int'>
    readonly date: FieldRef<"GoldValue", 'DateTime'>
    readonly price_per_gram: FieldRef<"GoldValue", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * GoldValue findUnique
   */
  export type GoldValueFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoldValue
     */
    select?: GoldValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoldValue
     */
    omit?: GoldValueOmit<ExtArgs> | null
    /**
     * Filter, which GoldValue to fetch.
     */
    where: GoldValueWhereUniqueInput
  }

  /**
   * GoldValue findUniqueOrThrow
   */
  export type GoldValueFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoldValue
     */
    select?: GoldValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoldValue
     */
    omit?: GoldValueOmit<ExtArgs> | null
    /**
     * Filter, which GoldValue to fetch.
     */
    where: GoldValueWhereUniqueInput
  }

  /**
   * GoldValue findFirst
   */
  export type GoldValueFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoldValue
     */
    select?: GoldValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoldValue
     */
    omit?: GoldValueOmit<ExtArgs> | null
    /**
     * Filter, which GoldValue to fetch.
     */
    where?: GoldValueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GoldValues to fetch.
     */
    orderBy?: GoldValueOrderByWithRelationInput | GoldValueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GoldValues.
     */
    cursor?: GoldValueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GoldValues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GoldValues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GoldValues.
     */
    distinct?: GoldValueScalarFieldEnum | GoldValueScalarFieldEnum[]
  }

  /**
   * GoldValue findFirstOrThrow
   */
  export type GoldValueFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoldValue
     */
    select?: GoldValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoldValue
     */
    omit?: GoldValueOmit<ExtArgs> | null
    /**
     * Filter, which GoldValue to fetch.
     */
    where?: GoldValueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GoldValues to fetch.
     */
    orderBy?: GoldValueOrderByWithRelationInput | GoldValueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GoldValues.
     */
    cursor?: GoldValueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GoldValues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GoldValues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GoldValues.
     */
    distinct?: GoldValueScalarFieldEnum | GoldValueScalarFieldEnum[]
  }

  /**
   * GoldValue findMany
   */
  export type GoldValueFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoldValue
     */
    select?: GoldValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoldValue
     */
    omit?: GoldValueOmit<ExtArgs> | null
    /**
     * Filter, which GoldValues to fetch.
     */
    where?: GoldValueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GoldValues to fetch.
     */
    orderBy?: GoldValueOrderByWithRelationInput | GoldValueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GoldValues.
     */
    cursor?: GoldValueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GoldValues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GoldValues.
     */
    skip?: number
    distinct?: GoldValueScalarFieldEnum | GoldValueScalarFieldEnum[]
  }

  /**
   * GoldValue create
   */
  export type GoldValueCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoldValue
     */
    select?: GoldValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoldValue
     */
    omit?: GoldValueOmit<ExtArgs> | null
    /**
     * The data needed to create a GoldValue.
     */
    data: XOR<GoldValueCreateInput, GoldValueUncheckedCreateInput>
  }

  /**
   * GoldValue createMany
   */
  export type GoldValueCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GoldValues.
     */
    data: GoldValueCreateManyInput | GoldValueCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GoldValue createManyAndReturn
   */
  export type GoldValueCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoldValue
     */
    select?: GoldValueSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GoldValue
     */
    omit?: GoldValueOmit<ExtArgs> | null
    /**
     * The data used to create many GoldValues.
     */
    data: GoldValueCreateManyInput | GoldValueCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GoldValue update
   */
  export type GoldValueUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoldValue
     */
    select?: GoldValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoldValue
     */
    omit?: GoldValueOmit<ExtArgs> | null
    /**
     * The data needed to update a GoldValue.
     */
    data: XOR<GoldValueUpdateInput, GoldValueUncheckedUpdateInput>
    /**
     * Choose, which GoldValue to update.
     */
    where: GoldValueWhereUniqueInput
  }

  /**
   * GoldValue updateMany
   */
  export type GoldValueUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GoldValues.
     */
    data: XOR<GoldValueUpdateManyMutationInput, GoldValueUncheckedUpdateManyInput>
    /**
     * Filter which GoldValues to update
     */
    where?: GoldValueWhereInput
    /**
     * Limit how many GoldValues to update.
     */
    limit?: number
  }

  /**
   * GoldValue updateManyAndReturn
   */
  export type GoldValueUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoldValue
     */
    select?: GoldValueSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GoldValue
     */
    omit?: GoldValueOmit<ExtArgs> | null
    /**
     * The data used to update GoldValues.
     */
    data: XOR<GoldValueUpdateManyMutationInput, GoldValueUncheckedUpdateManyInput>
    /**
     * Filter which GoldValues to update
     */
    where?: GoldValueWhereInput
    /**
     * Limit how many GoldValues to update.
     */
    limit?: number
  }

  /**
   * GoldValue upsert
   */
  export type GoldValueUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoldValue
     */
    select?: GoldValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoldValue
     */
    omit?: GoldValueOmit<ExtArgs> | null
    /**
     * The filter to search for the GoldValue to update in case it exists.
     */
    where: GoldValueWhereUniqueInput
    /**
     * In case the GoldValue found by the `where` argument doesn't exist, create a new GoldValue with this data.
     */
    create: XOR<GoldValueCreateInput, GoldValueUncheckedCreateInput>
    /**
     * In case the GoldValue was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GoldValueUpdateInput, GoldValueUncheckedUpdateInput>
  }

  /**
   * GoldValue delete
   */
  export type GoldValueDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoldValue
     */
    select?: GoldValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoldValue
     */
    omit?: GoldValueOmit<ExtArgs> | null
    /**
     * Filter which GoldValue to delete.
     */
    where: GoldValueWhereUniqueInput
  }

  /**
   * GoldValue deleteMany
   */
  export type GoldValueDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GoldValues to delete
     */
    where?: GoldValueWhereInput
    /**
     * Limit how many GoldValues to delete.
     */
    limit?: number
  }

  /**
   * GoldValue without action
   */
  export type GoldValueDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoldValue
     */
    select?: GoldValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoldValue
     */
    omit?: GoldValueOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    userid: 'userid',
    password: 'password',
    email: 'email',
    region: 'region',
    is_verified: 'is_verified',
    otp: 'otp',
    otp_expires: 'otp_expires'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const GoldAssetScalarFieldEnum: {
    id: 'id',
    type: 'type',
    weight: 'weight',
    purchase_price: 'purchase_price',
    purchase_date: 'purchase_date',
    userId: 'userId'
  };

  export type GoldAssetScalarFieldEnum = (typeof GoldAssetScalarFieldEnum)[keyof typeof GoldAssetScalarFieldEnum]


  export const GoldValueScalarFieldEnum: {
    id: 'id',
    date: 'date',
    price_per_gram: 'price_per_gram'
  };

  export type GoldValueScalarFieldEnum = (typeof GoldValueScalarFieldEnum)[keyof typeof GoldValueScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    userid?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    region?: StringFilter<"User"> | string
    is_verified?: BoolFilter<"User"> | boolean
    otp?: StringNullableFilter<"User"> | string | null
    otp_expires?: DateTimeNullableFilter<"User"> | Date | string | null
    goldAssets?: GoldAssetListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    userid?: SortOrder
    password?: SortOrder
    email?: SortOrder
    region?: SortOrder
    is_verified?: SortOrder
    otp?: SortOrderInput | SortOrder
    otp_expires?: SortOrderInput | SortOrder
    goldAssets?: GoldAssetOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userid?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    region?: StringFilter<"User"> | string
    is_verified?: BoolFilter<"User"> | boolean
    otp?: StringNullableFilter<"User"> | string | null
    otp_expires?: DateTimeNullableFilter<"User"> | Date | string | null
    goldAssets?: GoldAssetListRelationFilter
  }, "id" | "userid" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    userid?: SortOrder
    password?: SortOrder
    email?: SortOrder
    region?: SortOrder
    is_verified?: SortOrder
    otp?: SortOrderInput | SortOrder
    otp_expires?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    userid?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    region?: StringWithAggregatesFilter<"User"> | string
    is_verified?: BoolWithAggregatesFilter<"User"> | boolean
    otp?: StringNullableWithAggregatesFilter<"User"> | string | null
    otp_expires?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
  }

  export type GoldAssetWhereInput = {
    AND?: GoldAssetWhereInput | GoldAssetWhereInput[]
    OR?: GoldAssetWhereInput[]
    NOT?: GoldAssetWhereInput | GoldAssetWhereInput[]
    id?: IntFilter<"GoldAsset"> | number
    type?: StringFilter<"GoldAsset"> | string
    weight?: FloatFilter<"GoldAsset"> | number
    purchase_price?: FloatFilter<"GoldAsset"> | number
    purchase_date?: DateTimeFilter<"GoldAsset"> | Date | string
    userId?: IntFilter<"GoldAsset"> | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type GoldAssetOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    weight?: SortOrder
    purchase_price?: SortOrder
    purchase_date?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type GoldAssetWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GoldAssetWhereInput | GoldAssetWhereInput[]
    OR?: GoldAssetWhereInput[]
    NOT?: GoldAssetWhereInput | GoldAssetWhereInput[]
    type?: StringFilter<"GoldAsset"> | string
    weight?: FloatFilter<"GoldAsset"> | number
    purchase_price?: FloatFilter<"GoldAsset"> | number
    purchase_date?: DateTimeFilter<"GoldAsset"> | Date | string
    userId?: IntFilter<"GoldAsset"> | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type GoldAssetOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    weight?: SortOrder
    purchase_price?: SortOrder
    purchase_date?: SortOrder
    userId?: SortOrder
    _count?: GoldAssetCountOrderByAggregateInput
    _avg?: GoldAssetAvgOrderByAggregateInput
    _max?: GoldAssetMaxOrderByAggregateInput
    _min?: GoldAssetMinOrderByAggregateInput
    _sum?: GoldAssetSumOrderByAggregateInput
  }

  export type GoldAssetScalarWhereWithAggregatesInput = {
    AND?: GoldAssetScalarWhereWithAggregatesInput | GoldAssetScalarWhereWithAggregatesInput[]
    OR?: GoldAssetScalarWhereWithAggregatesInput[]
    NOT?: GoldAssetScalarWhereWithAggregatesInput | GoldAssetScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"GoldAsset"> | number
    type?: StringWithAggregatesFilter<"GoldAsset"> | string
    weight?: FloatWithAggregatesFilter<"GoldAsset"> | number
    purchase_price?: FloatWithAggregatesFilter<"GoldAsset"> | number
    purchase_date?: DateTimeWithAggregatesFilter<"GoldAsset"> | Date | string
    userId?: IntWithAggregatesFilter<"GoldAsset"> | number
  }

  export type GoldValueWhereInput = {
    AND?: GoldValueWhereInput | GoldValueWhereInput[]
    OR?: GoldValueWhereInput[]
    NOT?: GoldValueWhereInput | GoldValueWhereInput[]
    id?: IntFilter<"GoldValue"> | number
    date?: DateTimeFilter<"GoldValue"> | Date | string
    price_per_gram?: FloatFilter<"GoldValue"> | number
  }

  export type GoldValueOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    price_per_gram?: SortOrder
  }

  export type GoldValueWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    date?: Date | string
    AND?: GoldValueWhereInput | GoldValueWhereInput[]
    OR?: GoldValueWhereInput[]
    NOT?: GoldValueWhereInput | GoldValueWhereInput[]
    price_per_gram?: FloatFilter<"GoldValue"> | number
  }, "id" | "date">

  export type GoldValueOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    price_per_gram?: SortOrder
    _count?: GoldValueCountOrderByAggregateInput
    _avg?: GoldValueAvgOrderByAggregateInput
    _max?: GoldValueMaxOrderByAggregateInput
    _min?: GoldValueMinOrderByAggregateInput
    _sum?: GoldValueSumOrderByAggregateInput
  }

  export type GoldValueScalarWhereWithAggregatesInput = {
    AND?: GoldValueScalarWhereWithAggregatesInput | GoldValueScalarWhereWithAggregatesInput[]
    OR?: GoldValueScalarWhereWithAggregatesInput[]
    NOT?: GoldValueScalarWhereWithAggregatesInput | GoldValueScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"GoldValue"> | number
    date?: DateTimeWithAggregatesFilter<"GoldValue"> | Date | string
    price_per_gram?: FloatWithAggregatesFilter<"GoldValue"> | number
  }

  export type UserCreateInput = {
    userid: string
    password: string
    email: string
    region: string
    is_verified?: boolean
    otp?: string | null
    otp_expires?: Date | string | null
    goldAssets?: GoldAssetCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    userid: string
    password: string
    email: string
    region: string
    is_verified?: boolean
    otp?: string | null
    otp_expires?: Date | string | null
    goldAssets?: GoldAssetUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    userid?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    is_verified?: BoolFieldUpdateOperationsInput | boolean
    otp?: NullableStringFieldUpdateOperationsInput | string | null
    otp_expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    goldAssets?: GoldAssetUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userid?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    is_verified?: BoolFieldUpdateOperationsInput | boolean
    otp?: NullableStringFieldUpdateOperationsInput | string | null
    otp_expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    goldAssets?: GoldAssetUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    userid: string
    password: string
    email: string
    region: string
    is_verified?: boolean
    otp?: string | null
    otp_expires?: Date | string | null
  }

  export type UserUpdateManyMutationInput = {
    userid?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    is_verified?: BoolFieldUpdateOperationsInput | boolean
    otp?: NullableStringFieldUpdateOperationsInput | string | null
    otp_expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userid?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    is_verified?: BoolFieldUpdateOperationsInput | boolean
    otp?: NullableStringFieldUpdateOperationsInput | string | null
    otp_expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type GoldAssetCreateInput = {
    type: string
    weight: number
    purchase_price: number
    purchase_date: Date | string
    user: UserCreateNestedOneWithoutGoldAssetsInput
  }

  export type GoldAssetUncheckedCreateInput = {
    id?: number
    type: string
    weight: number
    purchase_price: number
    purchase_date: Date | string
    userId: number
  }

  export type GoldAssetUpdateInput = {
    type?: StringFieldUpdateOperationsInput | string
    weight?: FloatFieldUpdateOperationsInput | number
    purchase_price?: FloatFieldUpdateOperationsInput | number
    purchase_date?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutGoldAssetsNestedInput
  }

  export type GoldAssetUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    weight?: FloatFieldUpdateOperationsInput | number
    purchase_price?: FloatFieldUpdateOperationsInput | number
    purchase_date?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type GoldAssetCreateManyInput = {
    id?: number
    type: string
    weight: number
    purchase_price: number
    purchase_date: Date | string
    userId: number
  }

  export type GoldAssetUpdateManyMutationInput = {
    type?: StringFieldUpdateOperationsInput | string
    weight?: FloatFieldUpdateOperationsInput | number
    purchase_price?: FloatFieldUpdateOperationsInput | number
    purchase_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GoldAssetUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    weight?: FloatFieldUpdateOperationsInput | number
    purchase_price?: FloatFieldUpdateOperationsInput | number
    purchase_date?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type GoldValueCreateInput = {
    date: Date | string
    price_per_gram: number
  }

  export type GoldValueUncheckedCreateInput = {
    id?: number
    date: Date | string
    price_per_gram: number
  }

  export type GoldValueUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    price_per_gram?: FloatFieldUpdateOperationsInput | number
  }

  export type GoldValueUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    price_per_gram?: FloatFieldUpdateOperationsInput | number
  }

  export type GoldValueCreateManyInput = {
    id?: number
    date: Date | string
    price_per_gram: number
  }

  export type GoldValueUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    price_per_gram?: FloatFieldUpdateOperationsInput | number
  }

  export type GoldValueUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    price_per_gram?: FloatFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type GoldAssetListRelationFilter = {
    every?: GoldAssetWhereInput
    some?: GoldAssetWhereInput
    none?: GoldAssetWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type GoldAssetOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    userid?: SortOrder
    password?: SortOrder
    email?: SortOrder
    region?: SortOrder
    is_verified?: SortOrder
    otp?: SortOrder
    otp_expires?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    userid?: SortOrder
    password?: SortOrder
    email?: SortOrder
    region?: SortOrder
    is_verified?: SortOrder
    otp?: SortOrder
    otp_expires?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    userid?: SortOrder
    password?: SortOrder
    email?: SortOrder
    region?: SortOrder
    is_verified?: SortOrder
    otp?: SortOrder
    otp_expires?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type GoldAssetCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    weight?: SortOrder
    purchase_price?: SortOrder
    purchase_date?: SortOrder
    userId?: SortOrder
  }

  export type GoldAssetAvgOrderByAggregateInput = {
    id?: SortOrder
    weight?: SortOrder
    purchase_price?: SortOrder
    userId?: SortOrder
  }

  export type GoldAssetMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    weight?: SortOrder
    purchase_price?: SortOrder
    purchase_date?: SortOrder
    userId?: SortOrder
  }

  export type GoldAssetMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    weight?: SortOrder
    purchase_price?: SortOrder
    purchase_date?: SortOrder
    userId?: SortOrder
  }

  export type GoldAssetSumOrderByAggregateInput = {
    id?: SortOrder
    weight?: SortOrder
    purchase_price?: SortOrder
    userId?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type GoldValueCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    price_per_gram?: SortOrder
  }

  export type GoldValueAvgOrderByAggregateInput = {
    id?: SortOrder
    price_per_gram?: SortOrder
  }

  export type GoldValueMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    price_per_gram?: SortOrder
  }

  export type GoldValueMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    price_per_gram?: SortOrder
  }

  export type GoldValueSumOrderByAggregateInput = {
    id?: SortOrder
    price_per_gram?: SortOrder
  }

  export type GoldAssetCreateNestedManyWithoutUserInput = {
    create?: XOR<GoldAssetCreateWithoutUserInput, GoldAssetUncheckedCreateWithoutUserInput> | GoldAssetCreateWithoutUserInput[] | GoldAssetUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GoldAssetCreateOrConnectWithoutUserInput | GoldAssetCreateOrConnectWithoutUserInput[]
    createMany?: GoldAssetCreateManyUserInputEnvelope
    connect?: GoldAssetWhereUniqueInput | GoldAssetWhereUniqueInput[]
  }

  export type GoldAssetUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<GoldAssetCreateWithoutUserInput, GoldAssetUncheckedCreateWithoutUserInput> | GoldAssetCreateWithoutUserInput[] | GoldAssetUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GoldAssetCreateOrConnectWithoutUserInput | GoldAssetCreateOrConnectWithoutUserInput[]
    createMany?: GoldAssetCreateManyUserInputEnvelope
    connect?: GoldAssetWhereUniqueInput | GoldAssetWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type GoldAssetUpdateManyWithoutUserNestedInput = {
    create?: XOR<GoldAssetCreateWithoutUserInput, GoldAssetUncheckedCreateWithoutUserInput> | GoldAssetCreateWithoutUserInput[] | GoldAssetUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GoldAssetCreateOrConnectWithoutUserInput | GoldAssetCreateOrConnectWithoutUserInput[]
    upsert?: GoldAssetUpsertWithWhereUniqueWithoutUserInput | GoldAssetUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GoldAssetCreateManyUserInputEnvelope
    set?: GoldAssetWhereUniqueInput | GoldAssetWhereUniqueInput[]
    disconnect?: GoldAssetWhereUniqueInput | GoldAssetWhereUniqueInput[]
    delete?: GoldAssetWhereUniqueInput | GoldAssetWhereUniqueInput[]
    connect?: GoldAssetWhereUniqueInput | GoldAssetWhereUniqueInput[]
    update?: GoldAssetUpdateWithWhereUniqueWithoutUserInput | GoldAssetUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GoldAssetUpdateManyWithWhereWithoutUserInput | GoldAssetUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GoldAssetScalarWhereInput | GoldAssetScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type GoldAssetUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<GoldAssetCreateWithoutUserInput, GoldAssetUncheckedCreateWithoutUserInput> | GoldAssetCreateWithoutUserInput[] | GoldAssetUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GoldAssetCreateOrConnectWithoutUserInput | GoldAssetCreateOrConnectWithoutUserInput[]
    upsert?: GoldAssetUpsertWithWhereUniqueWithoutUserInput | GoldAssetUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GoldAssetCreateManyUserInputEnvelope
    set?: GoldAssetWhereUniqueInput | GoldAssetWhereUniqueInput[]
    disconnect?: GoldAssetWhereUniqueInput | GoldAssetWhereUniqueInput[]
    delete?: GoldAssetWhereUniqueInput | GoldAssetWhereUniqueInput[]
    connect?: GoldAssetWhereUniqueInput | GoldAssetWhereUniqueInput[]
    update?: GoldAssetUpdateWithWhereUniqueWithoutUserInput | GoldAssetUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GoldAssetUpdateManyWithWhereWithoutUserInput | GoldAssetUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GoldAssetScalarWhereInput | GoldAssetScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutGoldAssetsInput = {
    create?: XOR<UserCreateWithoutGoldAssetsInput, UserUncheckedCreateWithoutGoldAssetsInput>
    connectOrCreate?: UserCreateOrConnectWithoutGoldAssetsInput
    connect?: UserWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateOneRequiredWithoutGoldAssetsNestedInput = {
    create?: XOR<UserCreateWithoutGoldAssetsInput, UserUncheckedCreateWithoutGoldAssetsInput>
    connectOrCreate?: UserCreateOrConnectWithoutGoldAssetsInput
    upsert?: UserUpsertWithoutGoldAssetsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutGoldAssetsInput, UserUpdateWithoutGoldAssetsInput>, UserUncheckedUpdateWithoutGoldAssetsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type GoldAssetCreateWithoutUserInput = {
    type: string
    weight: number
    purchase_price: number
    purchase_date: Date | string
  }

  export type GoldAssetUncheckedCreateWithoutUserInput = {
    id?: number
    type: string
    weight: number
    purchase_price: number
    purchase_date: Date | string
  }

  export type GoldAssetCreateOrConnectWithoutUserInput = {
    where: GoldAssetWhereUniqueInput
    create: XOR<GoldAssetCreateWithoutUserInput, GoldAssetUncheckedCreateWithoutUserInput>
  }

  export type GoldAssetCreateManyUserInputEnvelope = {
    data: GoldAssetCreateManyUserInput | GoldAssetCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type GoldAssetUpsertWithWhereUniqueWithoutUserInput = {
    where: GoldAssetWhereUniqueInput
    update: XOR<GoldAssetUpdateWithoutUserInput, GoldAssetUncheckedUpdateWithoutUserInput>
    create: XOR<GoldAssetCreateWithoutUserInput, GoldAssetUncheckedCreateWithoutUserInput>
  }

  export type GoldAssetUpdateWithWhereUniqueWithoutUserInput = {
    where: GoldAssetWhereUniqueInput
    data: XOR<GoldAssetUpdateWithoutUserInput, GoldAssetUncheckedUpdateWithoutUserInput>
  }

  export type GoldAssetUpdateManyWithWhereWithoutUserInput = {
    where: GoldAssetScalarWhereInput
    data: XOR<GoldAssetUpdateManyMutationInput, GoldAssetUncheckedUpdateManyWithoutUserInput>
  }

  export type GoldAssetScalarWhereInput = {
    AND?: GoldAssetScalarWhereInput | GoldAssetScalarWhereInput[]
    OR?: GoldAssetScalarWhereInput[]
    NOT?: GoldAssetScalarWhereInput | GoldAssetScalarWhereInput[]
    id?: IntFilter<"GoldAsset"> | number
    type?: StringFilter<"GoldAsset"> | string
    weight?: FloatFilter<"GoldAsset"> | number
    purchase_price?: FloatFilter<"GoldAsset"> | number
    purchase_date?: DateTimeFilter<"GoldAsset"> | Date | string
    userId?: IntFilter<"GoldAsset"> | number
  }

  export type UserCreateWithoutGoldAssetsInput = {
    userid: string
    password: string
    email: string
    region: string
    is_verified?: boolean
    otp?: string | null
    otp_expires?: Date | string | null
  }

  export type UserUncheckedCreateWithoutGoldAssetsInput = {
    id?: number
    userid: string
    password: string
    email: string
    region: string
    is_verified?: boolean
    otp?: string | null
    otp_expires?: Date | string | null
  }

  export type UserCreateOrConnectWithoutGoldAssetsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGoldAssetsInput, UserUncheckedCreateWithoutGoldAssetsInput>
  }

  export type UserUpsertWithoutGoldAssetsInput = {
    update: XOR<UserUpdateWithoutGoldAssetsInput, UserUncheckedUpdateWithoutGoldAssetsInput>
    create: XOR<UserCreateWithoutGoldAssetsInput, UserUncheckedCreateWithoutGoldAssetsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutGoldAssetsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutGoldAssetsInput, UserUncheckedUpdateWithoutGoldAssetsInput>
  }

  export type UserUpdateWithoutGoldAssetsInput = {
    userid?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    is_verified?: BoolFieldUpdateOperationsInput | boolean
    otp?: NullableStringFieldUpdateOperationsInput | string | null
    otp_expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateWithoutGoldAssetsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userid?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    is_verified?: BoolFieldUpdateOperationsInput | boolean
    otp?: NullableStringFieldUpdateOperationsInput | string | null
    otp_expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type GoldAssetCreateManyUserInput = {
    id?: number
    type: string
    weight: number
    purchase_price: number
    purchase_date: Date | string
  }

  export type GoldAssetUpdateWithoutUserInput = {
    type?: StringFieldUpdateOperationsInput | string
    weight?: FloatFieldUpdateOperationsInput | number
    purchase_price?: FloatFieldUpdateOperationsInput | number
    purchase_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GoldAssetUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    weight?: FloatFieldUpdateOperationsInput | number
    purchase_price?: FloatFieldUpdateOperationsInput | number
    purchase_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GoldAssetUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    weight?: FloatFieldUpdateOperationsInput | number
    purchase_price?: FloatFieldUpdateOperationsInput | number
    purchase_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}